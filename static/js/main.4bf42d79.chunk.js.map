{"version":3,"sources":["../../src/components/FormBox/index.tsx","../../src/functions.tsx","../../src/components/InputBox/TextInputBox.tsx","../../src/components/InputBox/index.tsx","../../src/components/InputBox/PasswordInputBox.tsx","../../src/components/InputBox/SelectInputBox.tsx","../../src/components/InputBox/DatePickerInputBox.tsx","../../src/components/InputBox/DateRangePickerInputBox.tsx","../../src/components/InputBox/RadioInputBox.tsx","App.tsx","index.tsx"],"names":["FormBox","layout","autoComplete","requiredMark","scrollToFirstError","behavior","children","rest","React","InputWrapperTypes","defaultOptionKeys","SplitInputWrapperProps","props","modifiedProps","formProps","inputProps","Object","InputWrapper","Form","TextInputBox","InputBox","Input","options","valueKey","textKey","separator","textKeys","Array","renderOptions","option","Select","key","value","DatePicker","type","buttonStyle","renderOptionText","Radio","App","className","onFinish","data","console","group","Text","name","placeholder","size","Password","DateRangePicker","list","id","htmlType","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4bf42d79.chunk.js","sourcesContent":["import React from \"react\";\nimport { FormProps, Form } from \"antd\";\n\nconst FormBox: React.FC<FormProps> = ({\n\tlayout = \"vertical\",\n\tautoComplete = \"off\",\n\trequiredMark = \"optional\",\n\tscrollToFirstError = { behavior: \"smooth\" },\n\tchildren,\n\t...rest\n}) => {\n\treturn (\n\t\t<Form\n\t\t\tlayout={layout}\n\t\t\tautoComplete={autoComplete}\n\t\t\trequiredMark={requiredMark}\n\t\t\tscrollToFirstError={scrollToFirstError}\n\t\t\t{...rest}\n\t\t>\n\t\t\t{children}\n\t\t</Form>\n\t);\n};\n\nexport default FormBox;\n","import React from \"react\";\nimport { FormItemProps, Form } from \"antd\";\n\nconst InputWrapperTypes = [\n\t\"name\",\n\t\"label\",\n\t\"rules\",\n\t\"prefixCls\",\n\t\"noStyle\",\n\t\"style\",\n\t\"className\",\n\t\"id\",\n\t\"hasFeedback\",\n\t\"validateStatus\",\n\t\"required\",\n\t\"hidden\",\n\t\"initialValue\",\n\t\"messageVariables\",\n\t\"tooltip\",\n\t\"fieldKey\",\n\t\"colon\",\n\t\"htmlFor\",\n\t\"labelAlign\",\n\t\"labelCol\",\n\t\"requiredMark\",\n\t\"required\",\n\t\"wrapperCol\",\n\t\"help\",\n\t\"extra\",\n\t\"status\",\n\t\"dependencies\",\n\t\"getValueFromEvent\",\n\t\"name\",\n\t\"normalize\",\n\t\"rules\",\n\t\"shouldUpdate\",\n\t\"trigger\",\n\t\"validateTrigger\",\n\t\"validateFirst\",\n\t\"valuePropName\",\n\t\"getValueProps\",\n\t\"messageVariables\",\n\t\"initialValue\",\n\t\"onReset\",\n\t\"preserve\",\n\t\"isListField\",\n\t\"isList\",\n\t\"fieldContext\",\n];\n\nexport const defaultOptionKeys = { value: \"id\", text: \"name\" };\nexport const defaultSeparator = \"\";\n\nexport const SplitInputWrapperProps = (props: any) => {\n\tconst modifiedProps: any = { formProps: {}, inputProps: {} };\n\tObject.keys(props).forEach((key) => {\n\t\tif (InputWrapperTypes.includes(key)) {\n\t\t\tmodifiedProps.formProps[key] = props[key];\n\t\t} else {\n\t\t\tmodifiedProps.inputProps[key] = props[key];\n\t\t}\n\t});\n\treturn modifiedProps;\n};\n\nexport const InputWrapper: React.FC<FormItemProps> = ({\n\tchildren,\n\t...rest\n}) => {\n\treturn <Form.Item {...rest}>{children}</Form.Item>;\n};\n","import React from \"react\";\nimport { Input } from \"antd\";\nimport { SplitInputWrapperProps, InputWrapper } from \"../../functions\";\nimport { InputBoxProps } from \"./interface\";\n\nconst TextInputBox: React.FC<InputBoxProps> = (props) => {\n\tconst { formProps, inputProps } = SplitInputWrapperProps(props);\n\treturn (\n\t\t<InputWrapper {...formProps}>\n\t\t\t<Input {...inputProps} />\n\t\t</InputWrapper>\n\t);\n};\n\nexport default TextInputBox;\n","import React from \"react\";\nimport { FormItemProps } from \"antd\";\nimport TextInputBox from \"./TextInputBox\";\nimport PasswordInputBox from \"./PasswordInputBox\";\nimport SelectInputBox from \"./SelectInputBox\";\nimport { InputBoxProps } from \"./interface\";\nimport DatePickerInputBox from \"./DatePickerInputBox\";\nimport DateRangePickerInputBox from \"./DateRangePickerInputBox\";\nimport RadioInputBox from \"./RadioInputBox\";\n\nconst InternalInputBox: React.FC<InputBoxProps> = (props) => {\n\treturn <TextInputBox {...props} />;\n};\n\ninterface CompoundedComponent\n\textends React.ForwardRefExoticComponent<FormItemProps> {\n\tText: typeof TextInputBox;\n\tPassword: typeof PasswordInputBox;\n\tSelect: typeof SelectInputBox;\n\tDatePicker: typeof DatePickerInputBox;\n\tDateRangePicker: typeof DateRangePickerInputBox;\n\tRadio: typeof RadioInputBox;\n}\n\nconst InputBox = InternalInputBox as CompoundedComponent;\nInputBox.Text = TextInputBox;\nInputBox.Password = PasswordInputBox;\nInputBox.Select = SelectInputBox;\nInputBox.DatePicker = DatePickerInputBox;\nInputBox.DateRangePicker = DateRangePickerInputBox;\nInputBox.Radio = RadioInputBox;\n\nexport default InputBox;\n","import React from \"react\";\nimport { Input } from \"antd\";\nimport { SplitInputWrapperProps, InputWrapper } from \"../../functions\";\nimport { PasswordInputBoxProps } from \"./interface\";\n\nconst PasswordInputBox: React.FC<PasswordInputBoxProps> = (props) => {\n\tconst { formProps, inputProps } = SplitInputWrapperProps(props);\n\treturn (\n\t\t<InputWrapper {...formProps}>\n\t\t\t<Input.Password {...inputProps} />\n\t\t</InputWrapper>\n\t);\n};\n\nexport default PasswordInputBox;\n","import React from \"react\";\nimport { Select } from \"antd\";\nimport {\n\tdefaultOptionKeys,\n\tdefaultSeparator,\n\tInputWrapper,\n\tSplitInputWrapperProps,\n} from \"../../functions\";\nimport { SelectInputBoxProps } from \"./interface\";\n\nconst SelectInputBox: React.FC<SelectInputBoxProps> = (props) => {\n\tconst { formProps, inputProps } = SplitInputWrapperProps(props);\n\tconst { options, ...rest } = inputProps;\n\n\tconst valueKey = options?.valueKey || defaultOptionKeys.value;\n\tconst textKey = options?.textKey || defaultOptionKeys.text;\n\tconst separator = options?.separator || defaultSeparator;\n\tlet textKeys: any[] = [];\n\tif (Array.isArray(options?.textKey)) {\n\t\ttextKeys = options?.textKey;\n\t}\n\n\tconst renderOptions = options?.list?.map((option: any) => {\n\t\tif (\n\t\t\toptions?.rejectedValues &&\n\t\t\toptions?.rejectedValues.includes(option[valueKey]) &&\n\t\t\t!options?.requiredValues.includes(option[valueKey])\n\t\t) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn (\n\t\t\t<Select.Option key={option[valueKey]} value={option[valueKey]}>\n\t\t\t\t{textKeys.length <= 0\n\t\t\t\t\t? option[textKey]\n\t\t\t\t\t: textKeys\n\t\t\t\t\t\t\t.map((text_key) => option[text_key] || text_key)\n\t\t\t\t\t\t\t.join(separator)}\n\t\t\t</Select.Option>\n\t\t);\n\t});\n\n\treturn (\n\t\t<InputWrapper {...formProps}>\n\t\t\t<Select {...rest}>{renderOptions}</Select>\n\t\t</InputWrapper>\n\t);\n};\n\nexport default SelectInputBox;\n","import React from \"react\";\nimport { DatePicker } from \"antd\";\nimport { DatePickerInputBoxProps } from \"./interface\";\nimport { SplitInputWrapperProps, InputWrapper } from \"../../functions\";\n\nconst DatePickerInputBox: React.FC<DatePickerInputBoxProps> = (props) => {\n\tconst { formProps, inputProps } = SplitInputWrapperProps(props);\n\treturn (\n\t\t<InputWrapper {...formProps}>\n\t\t\t<DatePicker {...inputProps} />\n\t\t</InputWrapper>\n\t);\n};\n\nexport default DatePickerInputBox;\n","import React from \"react\";\nimport { DatePicker } from \"antd\";\nimport { DateRangePickerInputBoxProps } from \"./interface\";\nimport { SplitInputWrapperProps, InputWrapper } from \"../../functions\";\n\nconst DateRangePickerInputBox: React.FC<DateRangePickerInputBoxProps> = (\n\tprops\n) => {\n\tconst { formProps, inputProps } = SplitInputWrapperProps(props);\n\treturn (\n\t\t<InputWrapper {...formProps}>\n\t\t\t<DatePicker.RangePicker {...inputProps} />\n\t\t</InputWrapper>\n\t);\n};\n\nexport default DateRangePickerInputBox;\n","import React from \"react\";\nimport { Radio } from \"antd\";\nimport {\n\tdefaultOptionKeys,\n\tdefaultSeparator,\n\tInputWrapper,\n\tSplitInputWrapperProps,\n} from \"../../functions\";\nimport { RadioInputBoxProps } from \"./interface\";\n\nconst RadioInputBox: React.FC<RadioInputBoxProps> = (props) => {\n\tconst { formProps, inputProps } = SplitInputWrapperProps(props);\n\tconst { options, type, buttonStyle = \"solid\", ...rest } = inputProps;\n\n\tconst valueKey = options?.valueKey || defaultOptionKeys.value;\n\tconst textKey = options?.textKey || defaultOptionKeys.text;\n\tconst separator = options?.separator || defaultSeparator;\n\tlet textKeys: any[] = [];\n\tif (Array.isArray(options?.textKey)) {\n\t\ttextKeys = options?.textKey;\n\t}\n\n\tconst renderOptions = options?.list?.map((option: any) => {\n\t\tif (\n\t\t\toptions?.rejectedValues &&\n\t\t\toptions?.rejectedValues.includes(option[valueKey]) &&\n\t\t\t!options?.requiredValues.includes(option[valueKey])\n\t\t) {\n\t\t\treturn null;\n\t\t}\n\t\tconst renderOptionText =\n\t\t\ttextKeys.length <= 0\n\t\t\t\t? option[textKey]\n\t\t\t\t: textKeys\n\t\t\t\t\t\t.map((text_key) => option[text_key] || text_key)\n\t\t\t\t\t\t.join(separator);\n\t\tif (type === \"button\") {\n\t\t\treturn (\n\t\t\t\t<Radio.Button key={option[valueKey]} value={option[valueKey]}>\n\t\t\t\t\t{renderOptionText}\n\t\t\t\t</Radio.Button>\n\t\t\t);\n\t\t} else {\n\t\t\treturn (\n\t\t\t\t<Radio key={option[valueKey]} value={option[valueKey]}>\n\t\t\t\t\t{renderOptionText}\n\t\t\t\t</Radio>\n\t\t\t);\n\t\t}\n\t});\n\n\treturn (\n\t\t<InputWrapper {...formProps}>\n\t\t\t<Radio.Group {...rest} buttonStyle={buttonStyle}>\n\t\t\t\t{renderOptions}\n\t\t\t</Radio.Group>\n\t\t</InputWrapper>\n\t);\n};\n\nexport default RadioInputBox;\n","import React from \"react\";\n\nimport { Button, Card } from \"antd\";\nimport { FormBox, InputBox } from \"antd-addons\";\nimport \"antd/dist/antd.css\";\n\nconst App = () => {\n\tconst handleSubmit = (data: any): void => {\n\t\tconsole.group(data);\n\t};\n\treturn (\n\t\t<div className=\"page-wrapper\">\n\t\t\t<Card className=\"form-wrapper\">\n\t\t\t\t<FormBox onFinish={handleSubmit}>\n\t\t\t\t\t<InputBox.Text name=\"name\" placeholder=\"Name\" size=\"large\" />\n\t\t\t\t\t<InputBox.Password\n\t\t\t\t\t\tname=\"password\"\n\t\t\t\t\t\tplaceholder=\"Password\"\n\t\t\t\t\t\tsize=\"large\"\n\t\t\t\t\t/>\n\t\t\t\t\t<InputBox.DatePicker name=\"date\" size=\"large\" />\n\t\t\t\t\t<InputBox.DateRangePicker name=\"date_range\" size=\"large\" />\n\t\t\t\t\t<InputBox.Select\n\t\t\t\t\t\tname=\"select\"\n\t\t\t\t\t\tplaceholder=\"Select Option\"\n\t\t\t\t\t\toptions={{\n\t\t\t\t\t\t\tlist: [\n\t\t\t\t\t\t\t\t{ id: 1, name: \"option 1\" },\n\t\t\t\t\t\t\t\t{ id: 2, name: \"option 2\" },\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t}}\n\t\t\t\t\t/>\n\t\t\t\t\t<InputBox.Radio\n\t\t\t\t\t\tname=\"radio\"\n\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\toptions={{\n\t\t\t\t\t\t\tlist: [\n\t\t\t\t\t\t\t\t{ id: 1, name: \"option 1\" },\n\t\t\t\t\t\t\t\t{ id: 2, name: \"option 2\" },\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t}}\n\t\t\t\t\t/>\n\t\t\t\t\t<Button htmlType=\"submit\" type=\"primary\" size=\"large\">\n\t\t\t\t\t\tSubmit\n\t\t\t\t\t</Button>\n\t\t\t\t</FormBox>\n\t\t\t</Card>\n\t\t</div>\n\t);\n};\n\nexport default App;\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}